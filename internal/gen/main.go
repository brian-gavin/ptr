package main

import (
	"flag"
	"fmt"
	"os"
	"strings"
)

var ts = []string{
	"int",
	"uint",
	"int8",
	"uint8",
	"int16",
	"uint16",
	"int32",
	"uint32",
	"int64",
	"uint64",
	"byte",
	"rune",
	"complex64",
	"complex128",
	"float32",
	"float64",
	"string",
	"time.Duration",
	"time.Time",
}

func funcName(s string) string {
	var sb strings.Builder
	sb.Grow(2 + len(s))
	sb.WriteString("To")
	if _, a, f := strings.Cut(s, "."); f {
		s = a
	}
	sb.WriteString(strings.ToUpper(s[:1]))
	sb.WriteString(s[1:])
	return sb.String()
}

func open() *os.File {
	var filename string
	flag.StringVar(&filename, "f", "", "file to write to")
	flag.Parse()
	if filename == "" {
		panic("filename unset")
	}
	f, err := os.Create(filename)
	if err != nil {
		panic(err)
	}
	return f
}

func main() {
	f := open()
	fmt.Fprint(f, "// GENERATED BY internal/gen/main.go. DO NOT EDIT!\n\n")
	fmt.Fprint(f, "package ptr")
	for _, typ := range ts {
		fn := funcName(typ)
		fmt.Fprintf(f, "\n// %s returns a pointer to x.\nfunc %s(x %s) *%s { return &x }",
			fn, fn, typ, typ)
	}
	fmt.Fprintln(f)
}
